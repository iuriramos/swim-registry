from django.db import models


class ActivityCategory(models.Model):
    AERONAUTICAL_INFORMATION_MANAGEMENT = 'AERONAUTICAL INFORMATION MANAGEMENT'
    AIRPORT_CDM = 'AIRPORT CDM'
    COLLISION_AVOIDANCE = 'COLLISION AVOIDANCE'
    SURVEILLANCE_INFRASTRUCTURE = 'SURVEILLANCE INFRASTRUCTURE'
    TRAFFIC_SEQUENCING = 'TRAFFIC SEQUENCING'
    TRAFFIC_SYNCHRONISATION = 'TRAFFIC SYNCHRONISATION'
    TRAJECTORY_EXECUTION_AND_CONFORMANCE_MONITORING = 'TRAJECTORY EXECUTION AND CONFORMANCE MONITORING'
    CNS_INFRASTRUCTURE = 'CNS INFRASTRUCTURE'
    FLIGHT_INFORMATION_MANAGEMENT = 'FLIGHT INFORMATION MANAGEMENT'
    NAVIGTION_INFRASTRUCTURE = 'NAVIGTION INFRASTRUCTURE'
    ROUTE_DESIGN = 'ROUTE DESIGN'
    SEPARATION_PROVISION = 'SEPARATION PROVISION'
    TRAJECTORY_PLANNING = 'TRAJECTORY PLANNING'
    AIRSPACE_AND_SURFACE_STRUCTURE_DESIGN = 'AIRSPACE AND SURFACE STRUCTURE DESIGN'
    ATM_INFORMATION_MANAGEMENT = 'ATM INFORMATION MANAGEMENT'
    COMMUNICATION_INFRASTRUCTURE = 'COMMUNICATION INFRASTRUCTURE'
    METEOROLOGICAL_INFORMATION = 'METEOROLOGICAL INFORMATION'
    ROUTE_ASSIGNMENT_AND_GUIDANCE = 'ROUTE ASSIGNMENT AND GUIDANCE'
    AIRSPACE_AND_SURFACE_STRUCTURE_ALLOCATION = 'AIRSPACE AND SURFACE STRUCTURE ALLOCATION'
    MET_INFORMATION_MANAGEMENT = 'MET INFORMATION MANAGEMENT'
    AIRSPACE_ACCESS = 'AIRSPACE ACCESS'
    SHARED_INFORMATION_SERVICE_MANAGEMENT  = 'SHARED INFORMATION SERVICE MANAGEMENT'
    DEMAND_AND_CAPACITY_BALANCING = 'DEMAND AND CAPACITY BALANCING'
    CONFLICT_MANAGEMENT = 'CONFLICT MANAGEMENT'
    AIRPORT_MANAGEMENT = 'AIRPORT MANAGEMENT'
    TRAJECTORY_MANAGEMENT = 'TRAJECTORY MANAGEMENT'
    ATM_NETWORK_MANAGEMENT = 'ATM NETWORK MANAGEMENT'

    CHOICES = (
        (AERONAUTICAL_INFORMATION_MANAGEMENT, 'Aeronautical Information Management'),
        (AIRPORT_CDM, 'Airport CDM'),
        (COLLISION_AVOIDANCE, 'Collision Avoidance'),
        (SURVEILLANCE_INFRASTRUCTURE, 'Surveillance Infrastructure'),
        (TRAFFIC_SEQUENCING, 'Traffic Sequencing'),
        (TRAFFIC_SYNCHRONISATION, 'Traffic Synchronisation'),
        (TRAJECTORY_EXECUTION_AND_CONFORMANCE_MONITORING, 'Trajectory Execution And Conformance Monitoring'),
        (CNS_INFRASTRUCTURE, 'CNS Infrastructure'),
        (FLIGHT_INFORMATION_MANAGEMENT, 'Flight Information Management'),
        (NAVIGTION_INFRASTRUCTURE, 'Navigtion Infrastructure'),
        (ROUTE_DESIGN, 'Route Design'),
        (SEPARATION_PROVISION, 'Separation Provision'),
        (TRAJECTORY_PLANNING, 'Trajectory Planning'),
        (AIRSPACE_AND_SURFACE_STRUCTURE_DESIGN, 'Airspace And Surface Structure Design'),
        (ATM_INFORMATION_MANAGEMENT, 'ATM Information Management'),
        (COMMUNICATION_INFRASTRUCTURE, 'Communication Infrastructure'),
        (METEOROLOGICAL_INFORMATION, 'Meteorological Information'),
        (ROUTE_ASSIGNMENT_AND_GUIDANCE, 'Route Assignment And Guidance'),
        (AIRSPACE_AND_SURFACE_STRUCTURE_ALLOCATION, 'Airspace And Surface Structure Allocation'),
        (MET_INFORMATION_MANAGEMENT, 'MET Information Management'),
        (AIRSPACE_ACCESS, 'Airspace Access'),
        (SHARED_INFORMATION_SERVICE_MANAGEMENT , 'Shared Information Service Management'),
        (DEMAND_AND_CAPACITY_BALANCING, 'Demand And Capacity Balancing'),
        (CONFLICT_MANAGEMENT, 'Conflict Management'),
        (AIRPORT_MANAGEMENT, 'Airport Management'),
        (TRAJECTORY_MANAGEMENT, 'Trajectory Management'),
        (ATM_NETWORK_MANAGEMENT, 'ATM Network Management'),
    )

    name = models.CharField(max_length=50, choices=CHOICES, unique=True)

    class Meta:
        verbose_name = 'ATM activity category'
        verbose_name_plural = 'ATM activity categories'


    def __str__(self):
        return self.name
